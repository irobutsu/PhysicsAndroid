<!Doctype html> 
<html>
	<head>
		<meta charset="UTF-8">
		<meta name="viewport" content="width=device-width, initial-scale=1">
		<title>自然科学のための数学2015年度第17講</title>
		<script type="text/x-mathjax-config">MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ["\\(","\\)"]] } });</script>
		<script type="text/javascript" src="../sizensuugaku/../sizensuugaku/../MathJax/MathJax.js?config=TeX-AMS_HTML"></script>
		<link rel="STYLESHEET" href="ss.css" type="text/css">
		<link href="jquery.mobile-1.4.2.min.css" rel="stylesheet" type="text/css"/>
		<script src="jquery.js" type="text/javascript"></script>
		<script src="jquery.mobile-1.4.2.min.js" type="text/javascript"></script>
		<script src="rescalescreen.js" type="text/javascript"></script>
		<script src="graphscreen.js" type="text/javascript"></script>
		<script src="yajirushi.js" type="text/javascript"></script>
		<script src="vector.js" type="text/javascript"></script>
	</head> 
	<body>
	  	<div data-role="page" id="nine">
			<div data-role="header">
				<h3>第９章のアニメーション</h3>
			</div>
			<div data-role="content">
				<input type="button" value="ロケットの到達速度" onclick="location.href='#rocket'">
				<input type="button" value="兵力自乗の法則" onclick="location.href='#square'">
				<input type="button" value="流行の方程式" onclick="location.href='#logistic'">
			</div>
		</div>
	  	<div data-role="page" id="rocket">
			<div data-role="header">
				<h1>ロケットの到達速度</h1>
			</div>
			<div data-role="content">
				<script type="text/javascript">
				var gs0;
				var gs;
				var gsg;
				$(document).delegate('#rocket','pageinit',function(e) {
					gs0=new RescaleScreen("rocketcanvas0",20,2.4,0.9);
					gs0.setLeft(-2);
					gs0.setBottom(-1.2);
					gs0.gobackOriginalSize();
					gs=new RescaleScreen("rocketcanvas",20,2.4,0.9);
					gs.setLeft(-2);
					gs.setBottom(-1.2);
					gs.gobackOriginalSize();
					gsg=new RescaleScreen("graphcanvas",11,5,0.5);
					gsg.setLeft(0);
					gsg.setBottom(0);
					gsg.gobackOriginalSize();
					gsg0=new RescaleScreen("graphcanvas0",11,5,0.5);
					gsg0.setLeft(0);
					gsg0.setBottom(0);
					gsg0.gobackOriginalSize();
					
					writeRocket(0,gs0.ct());
					writeProp0(0,gs0.ct());
					writeRocket(0,gs.ct());
					writeProp(0,gs.ct());
					calcV0();
					calcVW();
					writeGraph0();
					writeGraph();
				});
				var F0=1;
				var F=1;
				function writeRocket(x,ct) {
					ct.strokeStyle="rgb(0,0,0)";
					ct.beginPath();
					ct.moveTo(x+5,0);
					ct.lineTo(x+4,1);
					ct.lineTo(x,1);
					ct.lineTo(x,-1);
					ct.lineTo(x+4,-1);
					ct.closePath();
					ct.stroke();
				}
				function writeProp0(x,ct) {
					ct.fillStyle="rgb(255,0,0)";
					ct.beginPath();
					ct.moveTo(x,-0.6);
					ct.lineTo(x,0.6);
					ct.lineTo(x+F0,0.6);
					ct.lineTo(x+F0,-0.6);
					ct.closePath();
					ct.fill();
				}
				function writeProp(x,ct) {
					var i;
					ct.fillStyle="rgba(255,0,0,0.7)";
					for(i=0;i<10;i++) {
						ct.beginPath();
						ct.moveTo(x+i*0.1*F,-0.6);
						ct.lineTo(x+i*0.1*F,0.6);
						ct.lineTo(x+(i+1)*0.1*F,0.6);
						ct.lineTo(x+(i+1)*0.1*F,-0.6);
						ct.closePath();
						ct.fill();
					}
				}
				function writeProp1(x,ct) {
					ct.fillStyle="rgba(255,0,0,0.7)";
					ct.beginPath();
					ct.moveTo(x,-0.6);
					ct.lineTo(x,0.6);
					ct.lineTo(x+0.1*F,0.6);
					ct.lineTo(x+0.1*F,-0.6);
					ct.closePath();
					ct.fill();
				}
				var w=1;
				var w0=1;
				var v;
				var x;
				var w1;
				var v0;
				var t;
				var t0;
				
				function calcV0() {
					v0=w0*F0;
					t0=0;
				}
				function rocketstart0() {
					calcV0();
					writeGraph0();
					move0();
				}
				function calcVW() {
					var i;
					v=new Array();
					x=new Array();
					w1=new Array();
					v[0]=0;
					x[0]=0;
					w1[0]=w;
					// v[1]は１段加速後の速度
					// x[1]は２段加速前での移動距離
					for(i=1; i<11 ; i++ ) {
						v[i]=v[i-1]+ F*0.1*w/ (1+F*0.1*(10-i));
						w1[i]=w1[i-1]- F*0.1*w/ (1+F*0.1*(10-i));
						x[i]=x[i-1]+v[i];
					}
					writeGraph();
				}
				function writeGraph0() {
					writeGraph0sub("rgba(0,0,255,0.3)");
				}
				function writeGraph0on() {
					writeGraph0sub("rgba(0,0,255,0.5)");
				}
				function writeGraph0sub(s) {
					gsg0.ctx.fillStyle="rgb(0,255,255)";
					gsg0.ctx.fillRect(gsg0.leftwx,gsg0.bottomy,gsg0.w,gsg0.h);
					gsg0.ctx.fillStyle=s;
					gsg0.ctx.fillRect(5.5,0,5.5,v0);
				}
				function writeGraphN(i) {
					writeGraph();
					gsg.ctx.fillStyle="rgba(0,0,255,0.5)";
					gsg.ctx.fillRect(i,0,1,v[i]);
				}
				function writeGraph() {
					var i;
					gsg.ctx.fillStyle="rgb(0,255,255)";
					gsg.ctx.fillRect(gsg.leftwx,gsg.bottomy,gsg.w,gsg.h);
					for(i=0; i<11; i++ ) {
						gsg.ctx.fillStyle="rgba(0,0,255,0.3)";
						gsg.ctx.fillRect(i,0,1,v[i]);
					}
				}
				function rocketstart() {
					calcVW();
					t=0;
					move();
				}
				function move0() {
					gs0.clearALL();
					var ya=new Yajirushi("rgba(0,0,255,0.3)");
					writeGraph0on();
					writeRocket(v0*t0,gs0.ct());
					writeProp0(-w0*t0,gs0.ct());
					ya.setVXY(v0,0);
					ya.setXY(v0*t0+5,0);
					ya.draw(gs0.ct());
					ya.setVXY(-w0,0);
					ya.setXY(-w0*t0,0);
					ya.draw(gs0.ct());
					
					t0+=0.1;
					if( w0*t0 -F0 > 4 && v0*t0 >18.5 ) {
						motohe0();
					} else {
						setTimeout("move0();",100);
					}
				}
				function move() {
					gs.clearALL();
					var t0=Math.floor(t); // tの整数部分
					var N;
					if( t0 > 9 ) {
						N=9;
					} else {
						N=t0;
					}
					writeGraphN(N+1);

					var t1=t-N; // tの0~9までの整数からはみ出した部分
					
					var ya=new Yajirushi("rgba(0,0,255,0.3)");
					var xR=x[N]+v[N+1]*t1;
					writeRocket(xR,gs.ct());
					ya.setVXY(v[N],0);
					ya.setXY(xR+5,0);
					ya.draw(gs.ct());
					
					var i;
					for(i=0; i<=N ; i++ ) {
						var xi=x[i]+0.1*F*i-w1[i]*(t-i);
						writeProp1(xi,gs.ct());
						ya.setXY(xi,0);
						ya.setVXY(-w1[i],0);
						ya.draw(gs.ct());
					}
					for(i=N+1; i<10 ; i++ ) {
						writeProp1(xR+0.1*F*i,gs.ct());
					}

					t+=0.1;
					
					if( t>20 ) {
						motohe();
					} else {
						setTimeout("move();",100);
					}
				}
				function motohe0() {
					t0=100000000;
					gs0.clearALL();
					writeRocket(0,gs0.ct());
					writeProp0(0,gs0.ct());
					calcV0();
					writeGraph0();
				}
				function motohe() {
					t=100000000;
					gs.clearALL();
					writeRocket(0,gs.ct());
					writeProp(0,gs.ct());
					calcVW();
					writeGraph();
				}
				</script>
				<p><canvas width="50%" height="200" class="floatnone" id="rocketcanvas0"></canvas></p>
				<p><canvas width="50%" height="200" class="floatnone" id="graphcanvas0"></canvas></p>
				<input type="range" id="massRatio0" value="1" min="0.1" max="4" step="0.1" onchange="F0=this.valueAsNumber; motohe0();"></p>
				<p>右のボタンを押すと噴射が行われる→<input type="button" data-inline="true" value="噴射！" id="rocketstart0" onClick="rocketstart0();">
					　右のボタンを押すと最初に戻る→<input type="button" data-inline="true" value="最初に戻る" id="rocketmotohe0" onClick="motohe0();"></p>
				<p><canvas width="50%" height="200" class="floatnone" id="rocketcanvas"></canvas></p>
				<p><canvas width="50%" height="200" class="floatnone" id="graphcanvas"></canvas></p>
				<p>噴射した量は、ロケット本体の何倍か？を、↓のスライダで決定する。</p>
				<input type="range" id="massRatio" value="1" min="0.1" max="4" step="0.1" onchange="F=this.valueAsNumber; motohe();"></p>
				<p>右のボタンを押すと噴射が行われる→<input type="button" data-inline="true" value="噴射！" id="rocketstart" onClick="rocketstart();">
					　右のボタンを押すと最初に戻る→<input type="button" data-inline="true" value="最初に戻る" id="rocketmotohe" onClick="motohe();"></p>
			</div>
			<div data-role="footer" align="center">
				<input type="button" value="HOME" data-icon="home" onclick="location.href='#nine'">
				<input type="button" value="戻る" data-icon="back"  onclick="history.back();">
				<a href="#square" data-icon="arrow-r">兵力自乗の法則</a>
			</div>
		</div>
		<div data-role="page" id="square">
			<div data-role="header">
				<h3>実例：兵力自乗の法則</h3>
			</div>
			<div data-role="content">
				<script>
				$(document).delegate('#square','pageinit',function(e) {
					init();
				});
				var A0=100;
				var B0=50;
				
				function restart() {
					time=0;
					A=A0;
					B=B0;
					$('#A0').html(A0);
					$('#B0').html(B0);
					$('#A0B0sq').html(A0*A0-B0*B0);
					gclear();
				}
				
				var time;
				
				function writeNow(x,dx,startx,col,ct) {
					var i;
					var i10;
					var i1;
					var r=hy*0.05;
					ct.fillStyle=col;
					ct.strokeStyle=col;
					i10=Math.floor(x*0.1);
					i1=x-i10*10;
					ct.beginPath();
					for( i=0; i< i10; i++ ) {
						ct.rect(startx+(i*2+0.1)*r,0,0.8*r,hy);
					}
					ct.rect(startx+(i10*2+0.1)*r,hy-i1*2*r,0.8*r,i1*2*r);
					ct.fill();
					ct.beginPath();
					ct.fillStyle="rgb(100,100,100)";
					ct.rect(startx+(i10*2+0.1)*r,hy-(i1+dx)*2*r,0.8*r,dx*2*r);
					ct.fill();
				}
				function marume4(x) {
					var xx=Math.round(10000*x);
					var pittari="";
					if( xx != x*10000 ) {
						pittari="...";
					}
					xx /= 10000;
					return xx + pittari;
				}
				function fightGO() {
					var dB;
					var dA;
					time++;
					if( B>0 && A>0 ) {
						dB=-A*0.005;
						dA=-B*0.005;
						A += dA;
						B += dB;
					}
					if( A<0 ) { A=0;}
					if( B<0 ) { B=0;}
					ctx.clearRect(0, 0, wx, hy);
					ctx.fillStyle="rgb(250,250,255)";
					ctx.fillRect(0,0,wx,hy);
					writeNow(A,-dA,0,"rgb(255,0,0)",ctx);
					writeNow(B,-dB,wx*0.5,"rgb(0,0,255)",ctx);
					$('#A').html(marume4(A));
					$('#B').html(marume4(B));
					$('#A0B0sqnow').html(marume4(A*A-B*B));
					
					ctx2.beginPath();
					ctx2.strokeStyle="rgba(255,0,0,0.5)";
					ctx2.moveTo(time,hy);
					ctx2.lineTo(time,hy-0.01*A*hy);
					ctx2.stroke();
					ctx2.beginPath();
					ctx2.strokeStyle="rgba(0,0,255,0.3)";
					ctx2.moveTo(time,hy);
					ctx2.lineTo(time,hy-0.01*B*hy);
					ctx2.stroke();

					
					setTimeout('fightGO() ',125);
					// アニメーションは１秒８コマなので、125ミリ秒間隔で呼び出す。
				}
				var A,B;
				
				var canvas;
				var gcanvas;
				var ctx;
				var wx,hy;
				function init() {
					time=0;
					A=A0;
					B=B0;
					canvas = document.getElementById("maincanvas");
					ctx=canvas.getContext("2d");
					wx=canvas.width;
					hy=canvas.height;
					gcanvas = document.getElementById("subcanvas");
					ctx2=gcanvas.getContext("2d");
					restart();
					gclear();
					fightGO();
				}
				var ctx2;
				function gclear() {
					ctx2.fillStyle="rgb(100,255,255)";
					ctx2.fillRect(0,0,gcanvas.width,gcanvas.height);
					ctx2.strokeStyle="rgb(0,0,0)";
					ctx2.beginPath();
					ctx2.moveTo(0,gcanvas.height/2);
					ctx2.lineTo(gcanvas.width,gcanvas.height/2);
					ctx2.stroke();
					ctx2.strokeStyle="rgb(100,100,100)";
					ctx2.beginPath();
					ctx2.moveTo(0,gcanvas.height/4);
					ctx2.lineTo(gcanvas.width,gcanvas.height/4);
					ctx2.moveTo(0,3*gcanvas.height/4);
					ctx2.lineTo(gcanvas.width,3*gcanvas.height/4);
					ctx2.stroke();
					ctx2.strokeStyle="rgb(200,200,200)";
					ctx2.beginPath();
					ctx2.moveTo(0,gcanvas.height/8);
					ctx2.lineTo(gcanvas.width,gcanvas.height/8);
					ctx2.moveTo(0,3*gcanvas.height/8);
					ctx2.lineTo(gcanvas.width,3*gcanvas.height/8);
					ctx2.moveTo(0,5*gcanvas.height/8);
					ctx2.lineTo(gcanvas.width,5*gcanvas.height/8);
					ctx2.moveTo(0,7*gcanvas.height/8);
					ctx2.lineTo(gcanvas.width,7*gcanvas.height/8);
					
					ctx2.stroke();
				}

				</script>
				<p>　二つの軍隊が戦争をしている。それぞれの兵力をA,Bとする。時間が経つと、AはBに比例して減り、BはAに比例して減る。</p>
				<p>　この現象を微分方程式を立てて解くと（詳細はテキストを参照）、</p>
				<p>A<sup>2</sup>-B<sup>2</sup> = 一定</p>
				<p>という式が導かれる。これは「兵力自乗の法則」（またはランチェスターの第2法則）として知られる。たとえばB=B<sub>0</sub>,A=2B<sub>0</sub>（AがBの2倍の兵力を持っていた）場合、この式の右辺は3(B<sub>0</sub>)<sup>2</sup>となるから、A=√3B<sub>0</sub>になったところでB=0となる。Bの兵力が文字通り全滅した時、Aは2B<sub>0</sub>→√3B<sub>0</sub>と変化する。</p>
				<div class="setsumei">以下はその様子のアニメーションである。<span class="aka">A</span>が<span class="ao">B</span>に比例して減り、<span class="ao">B</span>が<span class="aka">A</span>に比例して減るところを確認しよう。
				</div>
				<hr>
				<p><canvas id="maincanvas" width="400" height="200">すいません、あなたのブラウザはcanvasをサポートしてないようです。</canvas>
					<canvas id="subcanvas" width="200" height="200">すいません、あなたのブラウザはcanvasをサポートしてないようです。</canvas>
				</p>
				<div class="setsumei">右のボタンを押すと最初から戦闘開始→<input type="button" data-inline="true" value="再スタート" id="restart" onClick="restart();"></div>
				<div class="ui-grid-a">

					<div class="ui-block-a">
						次回のAの初期値：<input type="range" id="slA" value="100" min="1" max="100" step="1" onchange="A0=this.valueAsNumber; rewrite();">
					</div>
					<div class="ui-block-b">
						次回のBの初期値：<input type="range" id="slB" value="50" min="1" max="100" step="1" onchange="B0=this.valueAsNumber; rewrite();">
					</div>
					<div class="ui-block-a">
						A<sub>0</sub>=<span id="A0"></span><br>
						B<sub>0</sub>=<span id="B0"></span><br>
						(A<sub>0</sub>)<sup>2</sup>-(B<sub>0</sub>)<sup>2</sup>=<span id="A0B0sq"></span>
					</div>
					<div class="ui-block-b">
						A=<span id="A"></span><br>
						B=<span id="B"></span><br>
						A<sup>2</sup>-B<sup>2</sup>=<span id="A0B0sqnow"></span>
					</div>
				</div>
				<hr>
				<div class="setsumei">なお、上の式では(A<sub>0</sub>)<sup>2</sup>-(B<sub>0</sub>)<sup>2</sup>とA<sup>2</sup>-B<sup>2</sup>が一致しないが、これはプログラム上の計算誤差によるものであって、本質的ではない。</div>
				<hr>
			</div>
			<div data-role="footer" align="center">
				<a href="#rocket" data-icon="arrow-l">ロケットの到達速度</a>
				<input type="button" value="HOME" data-icon="home" onclick="location.href='#nine'">
				<input type="button" value="戻る" data-icon="back"  onclick="history.back();">
				<a href="#logistic" data-icon="arrow-r">流行の方程式</a>
			</div>
		</div>
		<script type="text/javascript">
		var Lx1=0;
		var gsL;
		var k=2;
		function F_L(x) {
			return 1/(1+Math.exp(-k*x-Lx1));
		} 
		function changeL() {
			Lx1=Math.round(Lx1*10)/ 10;
			document.getElementById('Lsl1').value=Lx1;
			rewriteL();
		}
		function rewriteL() {
			clearHatFlg();
			gsL.clearALL();
			gsL.writeContents();
		};
		var lineModeL=true;
		var gsLL;
		var tL=-2.5;
		var hatFlg;
		var hatCount;
		var hatCount_p;
		var hatNext=0;
		function writePeople() {
			var newHat=hatCount-hatCount_p;
			if( newHat >0 ) {
				while( newHat >0 ) {
					var i;
					i=Math.floor(Math.random()*50);
					hatNext += i;
					while( hatNext>=100 ) { hatNext -= 100; }
					while( hatFlg[hatNext]==true ) {
						hatNext++;
						if( hatNext>=100 ) {
							hatNext =0;
						}
					}
					hatFlg[hatNext]=true;
					newHat -=1;
				}
				hatCount_p=hatCount;
			}
			var i,j;
			var ct=gsLL.ctx;
			ct.fillStyle="rgb(255,255,255)";
			ct.fillRect(gsLL.leftwx,gsLL.bottomy,gsLL.w,gsLL.h);
			for(i=0; i<10 ; i++ ) {
				for(j=0; j<10 ; j++ ) {
					ct.fillStyle="rgb(200,200,0)";
					ct.beginPath();
					ct.arc(i+0.5,j+0.5,0.4,0,2*Math.PI);
					ct.fill();
					if( hatFlg[i*10+j] ) {
						ct.fillStyle="rgb(200,0,0)";
						ct.beginPath();
						ct.arc(i+0.5,j+0.5,0.43,0,Math.PI);
						ct.fill();
					}
				}
			}
		}
		function clearHatFlg() {
			hatCount=Math.floor(F_L(-5)*100);
			time=-2.5;
			var i;
			for(i=0; i<100 ; i++) {
				hatFlg[i]=false;
			}
			hatCount= Math.floor(F_L(-5)*100);
			hatCount_p=0;
		}
		$(document).delegate('#logistic','pageinit',function(e) {
			gsLL=new RescaleScreen("ryukou",10,10,0.3);
			gsLL.setLeft(0);
			gsLL.setBottom(0);
			gsLL.gobackOriginalSize();
			hatFlg=[];
			clearHatFlg();
			writePeople();
			gsL=new GraphScreen("canvasL",5,2.2,0.8);
			gsL.setLeft(-2.5);
			gsL.setBottom(-0.6);
			gsL.gobackOriginalSize();
			gsL.writeGraphs=function() {
				var i;
				
				var x,y;
				var ya=new Yajirushi("rgba(0,200,0,0.5)");
				var ct=gsL.ctx;
				ct.fillStyle="rgb(240,240,240)";
				ct.fillRect(gsL.leftwx,gsL.bottomy,gsL.w,gsL.h);
				var step=0.125;
				for( x=gsL.leftwx+step; x< gsL.rightwx; x += step ) {
					for( y=gsL.bottomy+step; y< gsL.topy; y += step ) {
						var dydx=k*(y*(1-y));
						var r=step/Math.sqrt(1+dydx*dydx);
						ya.setVXY(r,dydx*r);
						ya.setXY(x-0.5*r,y-0.5*dydx*r);
						ya.draw(ct);
					}
				}
				if( lineModeL ) {
					var minC=-7;
					var maxC=7;
					var savex1=Lx1;
					for(i=minC; i<=maxC ; i+=0.5 ) {
						Lx1=i;
						gsL.setFunction(F_L);
						gsL.writeFunction("rgba(0,0,200,0.2)");
					}
					Lx1=savex1;
					gsL.setFunction(F_L);
					gsL.writeFunction("rgb(255,0,0)");
				}
				ct.strokeStyle="rgb(255,0,0)";
				ct.beginPath();
				ct.moveTo(time,-3);
				ct.lineTo(time,3);
				ct.stroke();
			};
			gsL.writeContents();
			setTimeout('animeL();',100);
		});
		var time=-2.5;
		function animeL() {
			hatCount= Math.floor(F_L(time)*100+0.5);
			time+=0.04;
			if( time > 2.5 ) {
				clearHatFlg();
			}
			writePeople();
			gsL.writeContents();
			setTimeout('animeL();',125);
		}
		</script>
		<div data-role="page" id="logistic">
			<div data-role="header">
				<h3>実例：流行の方程式</h3>
			</div>
			<div data-role="content">
				<p align="center"><canvas width="100" height="100" id="ryukou" style="-ms-touch-action: none;"></canvas></p>
				<p align="center"><canvas width="400" height="400" id="canvasL" style="-ms-touch-action: none;"></canvas></p>
				<p>k=<input type="range" id="ksl" value="2" min="0" max="5" step="0.1" onchange="k=this.valueAsNumber; rewriteL();"></p>
				<p>C=<input type="range" id="Lsl1" value="0" min="-5" max="5" step="0.1" onchange="Lx1=this.valueAsNumber; changeL();"></p>
			</div>
			<div data-role="footer" align="center">
				<a href="#square" data-icon="arrow-l">兵力自乗の法則</a>
				<input type="button" value="HOME" data-icon="home" onclick="location.href='#nine'">
				<input type="button" value="戻る" data-icon="back"  onclick="history.back();">
				<a href="#qa" data-icon="arrow-r">受講者の感想・コメント</a>
			</div>
		</div>
		<div data-role="page" id="qa">
			<div data-role="header">
				<h1>受講者の感想・コメント</h1>
			</div>
			<div data-role="content">
				<p>　<span class="Q">青字</span>は受講者からの声、<span class="A">赤字</span>は前野よりの返答です。</p>

				<div class="Q">。</div>
				<div class="A">。</div>
				<p></p>
			</div>
			<div data-role="footer" align="center">
				<a href="#logistic" data-icon="arrow-l">流行の方程式</a>
				<input type="button" value="HOME" data-icon="home" onclick="location.href='#nine'">
				<input type="button" value="戻る" data-icon="back"  onclick="history.back();">
			</div>
		</div>
	</body>
</html>
