// JavaScript Document
// RescaleScreenに、中にある物体をドラッグする機能を加える。
var DragmanGraphScreen=function(canvas_string,ww,hh,adjustW) {
    RescaleScreen.call(this,canvas_string,ww,hh,adjustW); //親クラスのコンストラクタを呼ぶ。
	this.dragObjList=[];
//    var touchdev = true;
//    if (navigator.userAgent.indexOf('iPhone') > 0
//	    || navigator.userAgent.indexOf('iPod') > 0
//	    || navigator.userAgent.indexOf('iPad') > 0
//	    || navigator.userAgent.indexOf('Android') > 0) {
//	    touchdev = true;
//    }
    var nowgs=this; // この値は関数から抜けた後も残る。
//    if( touchdev ) {
	if( window.navigator.msPointerEnabled ) {
		this.canvas.addEventListener(
			"MSPointerDown",
			function(event) {
				event.preventManupulation();
				nowgs.ptdownsub(event.pointerID,event.pageX,event.pageY);
			},
			false
		);
		this.canvas.addEventListener(
			"MSPointerMove",
			function(event) {
				event.preventManupulation();
				nowgs.ptmovesub(event.pointerID,
								nowgs.fromMxtoCx(event.pageX),
								nowgs.fromMytoCy(event.pageY));
			},
			false);
		this.canvas.addEventListener(
			"MSPointerUp",
			function(event) {
				event.preventManupulation();
    	    	nowgs.ptendsub(e.pointerID);
			},
			false);
	} else {
		this.canvas.addEventListener(
			"touchstart",
			function(event) {
				event.preventDefault();
				var i;
				for(i=0 ; i< event.touches.length; i++ ) {
	    			var e = event.touches[i];
	    			var rect = event.target.getBoundingClientRect();
    				nowgs.ptdownsub(e.identifier,
									nowgs.fromMxtoCx(e.clientX - rect.left),
									nowgs.fromMytoCy(e.clientY - rect.top ));
				}
			}
			,false
		);
		this.canvas.addEventListener(
			"touchmove",
			function(event) {
				event.preventDefault();
				var i;
				for(i=0 ; i< event.touches.length; i++ ) {
	    			var e = event.touches[i];
   					var rect = event.target.getBoundingClientRect();
    	    		nowgs.ptmovesub(e.identifier,
									nowgs.fromMxtoCx(e.clientX - rect.left),
									nowgs.fromMytoCy(e.clientY - rect.top ));
				}
			},
			false);
		this.canvas.addEventListener(
			"touchend",
			function(event) {
				event.preventDefault();
				for(j=0; j<event.changedTouches.length; j++ ) {
    	    		var e=event.changedTouches[j];
    	    		nowgs.ptendsub(e.identifier);
				}
			},
			false);
	}
	//    } else {
	this.canvas.onmousedown = function(e) {
		e.preventDefault();
		var mouseX = e.clientX - e.target.getBoundingClientRect().left;
		var mouseY = e.clientY - e.target.getBoundingClientRect().top;
		nowgs.ptdownsub(0,nowgs.fromMxtoCx(mouseX),nowgs.fromMytoCy(mouseY));
	};
	this.canvas.onmousemove = function(e) {
		e.preventDefault();
		var mouseX = e.clientX - e.target.getBoundingClientRect().left;
		var mouseY = e.clientY - e.target.getBoundingClientRect().top;
		nowgs.ptmovesub(0,nowgs.fromMxtoCx(mouseX),nowgs.fromMytoCy(mouseY));
	};
	this.canvas.onmouseup = function(e) {
		nowgs.ptendsub(0);
	};
	this.canvas.onmouseout = function(e) {
		nowgs.ptendsub(0);
	};
//    }
};

// 親クラスタのプロトタイプを継承する。
DragmanGraphScreen.prototype=Object.create(RescaleScreen.prototype);
DragmanGraphScreen.prototype.constructor=DragmanGraphScreen;

DragmanGraphScreen.prototype.pushDragObjList=function(a) {
    this.dragObjList.push(a);
    a.x0=this.leftwx;
    a.y0=this.bottomy;
    a.x1=this.rightwx;
    a.y1=this.topy;
};
DragmanGraphScreen.prototype.ptdownsub=function(j,x,y) {
	var i;
    for(i=0; i<this.dragObjList.length ; i++ ) {
		if(this.dragObjList[i].inP(x,y) ) {
			this.dragObjList[i].setNowDrag(x,y);
			this.dragObjList[i].setID(j);
			return;
		}
    }
};

// マウスやタッチのカーソル移動
DragmanGraphScreen.prototype.ptmovesub=function(j,x,y) {
	var i=0;
	var rewriteflg=false;
	for( i=0; i< this.dragObjList.length; i++ ) {
		if( this.dragObjList[i].nowDrag 
			&& this.dragObjList[i].getID() == j ) {
			rewriteflg=true;
			this.dragObjList[i].moveByDrag(x,y);
		}
	}
	if( rewriteflg ) {
		this.setScale();
		this.clearALL();
		this.writeContents();
	}
};
DragmanGraphScreen.prototype.ptendsub=function(j) {
	var i=0;
	for( i=0; i< this.dragObjList.length; i++ ) {
		if( this.dragObjList[i].nowDrag 
			&& this.dragObjList[i].getID() == j ) {
			this.dragObjList[i].resetNowDrag();
		}
	}
};

DragmanGraphScreen.prototype.writeContents=function() {};
// プロットする関数。
DragmanGraphScreen.prototype.func=function(x) { return x;}
DragmanGraphScreen.prototype.setFunction=function(f,col) {
	if( col == undefined ) {
		col="rgba(255,0,0,0.8)";
	}
	var func=new Object();
	func.color=col;
	func.func=f;
	this.funcList.push(func);
}


// 設定しておいた関数のグラフを描く。
DragmanGraphScreen.prototype.writeFunction=function(num){
    var ct=this.ctx;
	var i;
	var x0=this.leftwx;
	var step=this.w/num;
	var f;
	for(f=0; f< this.funcList.length ; f++ ) {
		ct.strokeStyle=this.funcList[f].color;
		ct.beginPath();
		var fnc=this.funcList[f].func;
		ct.moveTo(x0,fnc(x0));
		var i;
		var x;
		for(i=1; i< num ; i++ ) {
			x=x0 + i*step;
			ct.lineTo(x,fnc(x));
		}
		ct.lineTo(this.rightwx,fnc(this.rightwx));
		ct.stroke();
	}
}
